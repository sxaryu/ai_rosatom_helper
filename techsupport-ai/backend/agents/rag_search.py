import logging
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)

class KnowledgeBase:
    def __init__(self):
        self.solutions = {
            "password_reset": [
                {
                    "question": "—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è",
                    "answer": """–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ portal.rosatom.ru/password-reset
2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –°–ú–°-–∫–æ–¥
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:
- –ù–µ –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤
- –ó–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
- –¶–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
- –ù–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: 8-800-xxx-xx-xx""",
                    "steps": [
                        "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è",
                        "–í–≤–µ—Å—Ç–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email",
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ –°–ú–°",
                        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                    ],
                    "confidence": 0.9
                }
            ],
            
            "access_issues": [
                {
                    "question": "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ",
                    "answer": """–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–æ–º:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞
3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
4. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ SAP/1C —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
–°—Ä–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ - –¥–æ 2 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤.""",
                    "steps": [
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", 
                        "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤",
                        "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞"
                    ],
                    "confidence": 0.8
                }
            ],
            
            "hardware": [
                {
                    "question": "–ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º",
                    "answer": """–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—á–∞—Ç—å—é:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∫ —Å–µ—Ç–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—É
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –≤—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
3. –û—á–∏—Å—Ç–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏ (–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –û—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏)
4. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–∞

–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∑–∞–∫—É–ø–æ–∫.""",
                    "steps": [
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞",
                        "–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                        "–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏",
                        "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä—ã"
                    ],
                    "confidence": 0.7
                }
            ],
            
            "greeting": [
                {
                    "question": "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                    "answer": """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –†–æ—Å–∞—Ç–æ–º! ü§ñ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:
‚Ä¢ –°–±—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª–µ–π
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–∞–º
‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –ü–û
‚Ä¢ –°–µ—Ç–µ–≤—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏

–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!""",
                    "steps": [],
                    "confidence": 0.95
                }
            ]
        }
    
    def search(self, query: str, category: str) -> Optional[Dict[str, Any]]:
        query_lower = query.lower()
        
        # –ò—â–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category in self.solutions:
            for solution in self.solutions[category]:
                if any(keyword in query_lower for keyword in solution["question"].split()):
                    return solution
        
        # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        for cat_solutions in self.solutions.values():
            for solution in cat_solutions:
                if any(keyword in query_lower for keyword in solution["question"].split()):
                    return solution
        
        return None