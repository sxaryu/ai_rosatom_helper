from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import logging
import uuid
from datetime import datetime
from typing import List, Optional, Dict, Any
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="AI TechSupport - –†–æ—Å–∞—Ç–æ–º",
    description="–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å RAG + LLM",
    version="2.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TicketRequest(BaseModel):
    user_id: str
    message: str

class TicketResponse(BaseModel):
    ticket_id: str
    response: str
    category: Optional[str] = None
    confidence: Optional[float] = None
    source: str = "knowledge_base"
    needs_human: bool = False
    solution_steps: Optional[List[str]] = None

# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ main.py)
class SimpleClassifier:
    def __init__(self):
        self.keyword_mapping = {
            "–ø–∞—Ä–æ–ª—å": "password_reset",
            "password": "password_reset", 
            "–ª–æ–≥–∏–Ω": "password_reset",
            "–≤—Ö–æ–¥": "password_reset",
            "—Å–±—Ä–æ—Å": "password_reset",
            
            "–¥–æ—Å—Ç—É–ø": "access_issues",
            "access": "access_issues", 
            "–≤–æ–π—Ç–∏": "access_issues",
            "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è": "access_issues",
            
            "–ø—Ä–∏–Ω—Ç–µ—Ä": "hardware",
            "–ø–µ—á–∞—Ç—å": "hardware",
            "–º–æ–Ω–∏—Ç–æ—Ä": "hardware",
            "–∫–æ–º–ø—å—é—Ç–µ—Ä": "hardware",
            "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": "hardware",
            
            "–ø–æ—á—Ç–∞": "software",
            "email": "software",
            "outlook": "software",
            "–ø—Ä–æ–≥—Ä–∞–º–º–∞": "software",
            
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç": "network",
            "—Å–µ—Ç—å": "network", 
            "vpn": "network",
            "wi-fi": "network"
        }
    
    def classify(self, message: str) -> Dict[str, Any]:
        message_lower = message.lower()
        
        category_scores = {}
        for keyword, category in self.keyword_mapping.items():
            if keyword in message_lower:
                category_scores[category] = category_scores.get(category, 0) + 1
        
        if category_scores:
            category = max(category_scores.items(), key=lambda x: x[1])[0]
            confidence = min(sum(category_scores.values()) / 5, 1.0)
        else:
            category = "other"
            confidence = 0.1
        
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "hi"]):
            confidence = 0.9
            category = "greeting"
        
        return {
            "category": category,
            "confidence": confidence,
            "keywords_found": list(category_scores.keys())
        }

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ main.py)
class SimpleKnowledgeBase:
    def __init__(self):
        self.solutions = {
            "password_reset": [
                {
                    "question": "—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è",
                    "answer": """–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ portal.rosatom.ru/password-reset
2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –°–ú–°-–∫–æ–¥
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:
- –ù–µ –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤
- –ó–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
- –¶–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: 8-800-xxx-xx-xx""",
                    "steps": [
                        "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è",
                        "–í–≤–µ—Å—Ç–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email",
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ –°–ú–°",
                        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                    ],
                    "confidence": 0.9
                }
            ],
            "greeting": [
                {
                    "question": "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                    "answer": """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –†–æ—Å–∞—Ç–æ–º! ü§ñ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:
‚Ä¢ –°–±—Ä–æ—Å–æ–º –ø–∞—Ä–æ–ª–µ–π
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –ü–û

–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!""",
                    "steps": [],
                    "confidence": 0.95
                }
            ],
            "hardware": [
                {
                    "question": "–ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º",
                    "answer": """–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—á–∞—Ç—å—é:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∫ —Å–µ—Ç–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—É
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –≤—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
3. –û—á–∏—Å—Ç–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏
4. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã –ø—Ä–∏–Ω—Ç–µ—Ä–∞""",
                    "steps": [
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞",
                        "–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                        "–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏",
                        "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä—ã"
                    ],
                    "confidence": 0.8
                }
            ]
        }
    
    def search(self, query: str, category: str) -> Optional[Dict[str, Any]]:
        query_lower = query.lower()
        
        if category in self.solutions:
            for solution in self.solutions[category]:
                if any(keyword in query_lower for keyword in solution["question"].split()):
                    return solution
        
        for cat_solutions in self.solutions.values():
            for solution in cat_solutions:
                if any(keyword in query_lower for keyword in solution["question"].split()):
                    return solution
        
        return None

# –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
class SimpleResponseGenerator:
    def __init__(self):
        self.templates = {
            "fallback": "–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã.",
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
        }
    
    def generate_llm_fallback(self, user_message: str) -> str:
        return f"–ó–∞–ø—Ä–æ—Å: '{user_message}' –ø–æ–ª—É—á–µ–Ω. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
classifier = SimpleClassifier()
knowledge_base = SimpleKnowledgeBase()
response_gen = SimpleResponseGenerator()

# –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤
tickets_history = []

class LLMClient:
    def __init__(self):
        self.base_url = "http://localhost:11434"
        self.model = "phi3:mini"
    
    def is_available(self):
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def generate_response(self, user_message: str, context: Optional[Dict[str, Any]] = None):
        try:
            system_prompt = """–¢—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –†–æ—Å–∞—Ç–æ–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
–î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."""
            
            if context:
                system_prompt += f"\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
            
            payload = {
                "model": self.model,
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                "stream": False,
                "options": {"temperature": 0.3}
            }
            
            response = requests.post(
                f"{self.base_url}/api/chat",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()['message']['content']
            else:
                return None
                
        except Exception as e:
            logger.error(f"LLM error: {e}")
            return None

llm_client = LLMClient()

@app.post("/tickets/", response_model=TicketResponse)
async def create_ticket(ticket: TicketRequest):
    try:
        ticket_id = f"TKT-{uuid.uuid4().hex[:8].upper()}"
        
        # 1. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        classification = classifier.classify(ticket.message)
        
        # 2. –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        kb_result = knowledge_base.search(ticket.message, classification["category"])
        
        response_text = ""
        source = "knowledge_base"
        solution_steps = []
        confidence = classification["confidence"]
        
        # 3. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        if kb_result and kb_result.get("confidence", 0) > 0.7:
            response_text = kb_result["answer"]
            solution_steps = kb_result.get("steps", [])
            confidence = kb_result["confidence"]
            source = "knowledge_base"
            
        # 4. –ï—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
        else:
            if llm_client.is_available():
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
                context_dict: Dict[str, Any] = {}
                if kb_result is not None:  # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                    context_dict = {"similar_solution": kb_result.get("answer", "")}
                
                llm_response = llm_client.generate_response(ticket.message, context_dict)
                if llm_response:
                    response_text = llm_response
                    source = "llm"
                    confidence = 0.6
                else:
                    response_text = response_gen.generate_llm_fallback(ticket.message)
                    source = "error"
                    confidence = 0.1
            else:
                # –ï—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                if kb_result is not None:  # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                    response_text = kb_result["answer"]
                    confidence = kb_result["confidence"]
                else:
                    response_text = response_gen.templates["fallback"]
                    confidence = 0.3
                source = "knowledge_base"
        
        # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ —á–µ–ª–æ–≤–µ–∫
        needs_human = (confidence < 0.3 or 
                      len(ticket.message.strip()) < 3 or
                      classification["category"] == "other")
        
        response = TicketResponse(
            ticket_id=ticket_id,
            response=response_text,
            category=classification["category"],
            confidence=confidence,
            source=source,
            needs_human=needs_human,
            solution_steps=solution_steps
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        tickets_history.append({
            "ticket_id": ticket_id,
            "user_id": ticket.user_id,
            "message": ticket.message,
            "response": response_text,
            "category": classification["category"],
            "source": source,
            "confidence": confidence,
            "timestamp": datetime.now().isoformat()
        })
        
        logger.info(f"Processed ticket {ticket_id}, source: {source}, category: {classification['category']}")
        return response
        
    except Exception as e:
        logger.error(f"Error: {e}")
        return TicketResponse(
            ticket_id="ERROR",
            response="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.",
            needs_human=True
        )

@app.get("/tickets/history")
async def get_history():
    return tickets_history

@app.get("/health")
async def health():
    ollama_status = "available" if llm_client.is_available() else "unavailable"
    return {
        "status": "healthy",
        "ollama": ollama_status,
        "tickets_processed": len(tickets_history),
        "timestamp": datetime.now().isoformat()
    }

@app.get("/")
async def root():
    return {"message": "AI TechSupport System - –†–æ—Å–∞—Ç–æ–º"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)