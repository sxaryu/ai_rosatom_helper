// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const chatApp = {
  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
  elements: {
    chatDiv: null,
    inputBox: null,
    sendBtn: null,
  },

  // URL API - –∏—Å–ø–æ–ª—å–∑—É–µ–º proxy —á–µ—Ä–µ–∑ Vite
  API_URL: "/api/tickets/",
  HEALTH_URL: "/api/health",

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  init() {
    this.elements.chatDiv = document.getElementById("chat");
    this.elements.inputBox = document.getElementById("inputBox");
    this.elements.sendBtn = document.getElementById("sendBtn");

    if (
      !this.elements.chatDiv ||
      !this.elements.inputBox ||
      !this.elements.sendBtn
    ) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: DOM —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    this.bindEvents();
    this.elements.inputBox.focus();
    console.log("‚úÖ AI TechSupport App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Vite");
    this.checkBackendStatus();
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞
  async checkBackendStatus() {
    try {
      console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞...");
      const response = await fetch(this.HEALTH_URL);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log("‚úÖ –ë—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç:", data);
      this.appendMessage(
        "bot",
        `–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${data.database}, AI: ${data.ollama}`
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–µ–Ω–¥–∞:", error);
      this.appendMessage(
        "bot",
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—ç–∫–µ–Ω–¥—É. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –Ω–∞ localhost:8000"
      );
    }
  },

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    this.elements.sendBtn.addEventListener("click", () => {
      console.log("üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏");
      this.sendMessage();
    });

    this.elements.inputBox.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        console.log("‚å®Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Enter");
        this.sendMessage();
      }
    });
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
  appendMessage(sender, message, metadata = {}) {
    const msgDiv = document.createElement("div");
    msgDiv.className = `message ${sender}`;

    let messageHTML = this.escapeHtml(message).replace(/\n/g, "<br>");

    if (metadata.needsHuman) {
      msgDiv.classList.add("human-escalation");
      messageHTML = messageHTML;
      console.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞");
    }

    msgDiv.innerHTML = messageHTML;
    this.elements.chatDiv.appendChild(msgDiv);
    this.elements.chatDiv.scrollTop = this.elements.chatDiv.scrollHeight;
  },

  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
  escapeHtml(text) {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
  showTypingIndicator() {
    const typingDiv = document.createElement("div");
    typingDiv.className = "message bot typing-indicator";
    typingDiv.id = "typingIndicator";
    typingDiv.textContent = "AI –¥—É–º–∞–µ—Ç...";
    this.elements.chatDiv.appendChild(typingDiv);
    this.elements.chatDiv.scrollTop = this.elements.chatDiv.scrollHeight;
  },

  // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
  hideTypingIndicator() {
    const typingIndicator = document.getElementById("typingIndicator");
    if (typingIndicator) {
      typingIndicator.remove();
    }
  },

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage() {
    const text = this.elements.inputBox.value.trim();
    if (!text) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
      return;
    }

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", text);
    this.appendMessage("user", text);
    this.elements.inputBox.value = "";
    this.elements.sendBtn.disabled = true;

    this.showTypingIndicator();

    try {
      const response = await fetch(this.API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          user_id: "user_" + Date.now(),
          message: text,
        }),
      });

      console.log("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, —Å—Ç–∞—Ç—É—Å:", response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", data);

      this.hideTypingIndicator();
      this.appendMessage("bot", data.response, {
        needsHuman: data.needs_human,
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
      this.hideTypingIndicator();
      this.appendMessage("bot", "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    } finally {
      this.elements.sendBtn.disabled = false;
      this.elements.inputBox.focus();
    }
  },

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
  loadExample(text) {
    this.elements.inputBox.value = text;
    this.elements.inputBox.focus();
    console.log("üìù –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä:", text);
  },

  // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
  clearChat() {
    this.elements.chatDiv.innerHTML =
      '<div class="message bot">–ß–∞—Ç –æ—á–∏—â–µ–Ω. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</div>';
    console.log("üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω");
  },
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.loadExample = function (text) {
  chatApp.loadExample(text);
};

window.clearChat = function () {
  chatApp.clearChat();
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener("DOMContentLoaded", function () {
  console.log("üåê DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Vite...");
  chatApp.init();
});
