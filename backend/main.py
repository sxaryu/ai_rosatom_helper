import os
import uuid
import logging
from datetime import datetime
from typing import List, Optional, Dict, Any

import requests
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# --- –ö–æ–Ω—Ñ–∏–≥ ---
OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "phi3:mini")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- FastAPI ---
app = FastAPI(
    title="AI TechSupport - –†–æ—Å–∞—Ç–æ–º",
    description="–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å RAG + LLM",
    version="2.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö ---
class TicketRequest(BaseModel):
    user_id: str
    message: str

class TicketResponse(BaseModel):
    ticket_id: str
    response: str
    category: Optional[str] = None
    confidence: Optional[float] = None
    source: str = "knowledge_base"
    needs_human: bool = False
    solution_steps: Optional[List[str]] = None


# --- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä ---
class SimpleClassifier:
    KEYWORDS = {
        "password_reset": ["–ø–∞—Ä–æ–ª—å", "password", "–ª–æ–≥–∏–Ω", "–≤—Ö–æ–¥", "—Å–±—Ä–æ—Å"],
        "access_issues": ["–¥–æ—Å—Ç—É–ø", "access", "–≤–æ–π—Ç–∏", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"],
        "hardware": ["–ø—Ä–∏–Ω—Ç–µ—Ä", "–ø–µ—á–∞—Ç—å", "–º–æ–Ω–∏—Ç–æ—Ä", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"],
        "software": ["–ø–æ—á—Ç–∞", "email", "outlook", "–ø—Ä–æ–≥—Ä–∞–º–º–∞"],
        "network": ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–µ—Ç—å", "vpn", "wi-fi"],
        "greeting": ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "hi"],
        "other": []  # ‚Üê –¥–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é other
    }

    def classify(self, message: str) -> Dict[str, Any]:
        msg = message.lower()
        scores = {}
        for cat, keywords in self.KEYWORDS.items():
            scores[cat] = sum(k in msg for k in keywords)
        
        # –ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π score = 0, —Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "other"
        category = max(scores.items(), key=lambda x: x[1])[0]
        max_score = scores[category]
        
        if max_score == 0:
            return {"category": "other", "confidence": 0.0}
        
        confidence = min(max_score / 5, 1.0)
        return {"category": category, "confidence": confidence}
# --- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ---
class SimpleKnowledgeBase:
    SOLUTIONS = {
        "password_reset": {
            "triggers": ["–ø–∞—Ä–æ–ª—å", "password", "—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è", "–∑–∞–±—ã–ª –ø–∞—Ä–æ–ª—å", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", "–ª–æ–≥–∏–Ω", "–≤—Ö–æ–¥", "—É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å"],
            "answer": """–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ portal.rosatom.ru/password-reset
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –°–ú–°
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (495) 123-45-67.""",
            "steps": ["–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è", "–í–≤–µ—Å—Ç–∏ email", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ –°–ú–°", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"],
            "confidence": 0.9
        },
        "hardware": {
            "triggers": ["–ø—Ä–∏–Ω—Ç–µ—Ä", "–ø–µ—á–∞—Ç—å", "–Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç", "–º–æ–Ω–∏—Ç–æ—Ä", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "–º—ã—à—å", "–∫–∞—Ä—Ç—Ä–∏–¥–∂", "—Ç–æ–Ω–µ—Ä"],
            "answer": """–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è –∏ USB
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω –∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –Ω–∞ –¥–∏—Å–ø–ª–µ–µ
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –±—É–º–∞–≥–∏ –∏ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞
4. –û—á–∏—Å—Ç–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏ (–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è > –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ > –ü—Ä–∏–Ω—Ç–µ—Ä—ã)
5. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞

–î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ ITSM.""",
            "steps": ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –±—É–º–∞–≥—É", "–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏", "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä—ã"],
            "confidence": 0.8
        },
        "software": {
            "triggers": ["–ø–æ—á—Ç–∞", "email", "outlook", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "—Å–æ—Ñ—Ç", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "—É–¥–∞–ª–µ–Ω–∏–µ", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "office", "windows"],
            "answer": """–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ—á—Ç–æ–π:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Outlook
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
4. –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É

–î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ü–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–Ω—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º.""",
            "steps": ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"],
            "confidence": 0.8
        },
        "network": {
            "triggers": ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–µ—Ç—å", "vpn", "wi-fi", "wifi", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "–∫–∞–±–µ–ª—å", "–ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"],
            "answer": """–†–µ—à–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—è Ethernet
2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä/–∫–æ–º–º—É—Ç–∞—Ç–æ—Ä
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω
5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–µ—Ç–∏ (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –Ω–∞ –∑–Ω–∞—á–∫–µ —Å–µ—Ç–∏)

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cisco AnyConnect VPN.""",
            "steps": ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"],
            "confidence": 0.8
        },
        "access_issues": {
            "triggers": ["–¥–æ—Å—Ç—É–ø", "access", "–≤–æ–π—Ç–∏", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "permission", "–ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", "—Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"],
            "answer": """–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–æ–º:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏
4. –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞
5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.""",
            "steps": ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", "–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞", "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä"],
            "confidence": 0.8
        },
        "greeting": {
            "triggers": ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "hi", "–¥–æ–±—Ä—ã–π", "–Ω–∞—á–∞—Ç—å", "–ø–æ–º–æ—â—å", "help"],
            "answer": """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –†–æ—Å–∞—Ç–æ–º! ü§ñ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:
- –°–±—Ä–æ—Å–æ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª–µ–π
- –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∏—Å—Ç–µ–º–∞–º
- –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º (–ø—Ä–∏–Ω—Ç–µ—Ä—ã, –∫–æ–º–ø—å—é—Ç–µ—Ä—ã)
- –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º
- –°–µ—Ç–µ–≤—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏

–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!""",
            "steps": [],
            "confidence": 0.95
        }
    }

    def search(self, message: str, category: str) -> Optional[Dict[str, Any]]:
        msg = message.lower().strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        solution = self.SOLUTIONS.get(category)
        if solution:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            triggers = solution.get("triggers", [])
            if any(trigger in msg for trigger in triggers):
                return solution
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—â–µ–º –ø–æ –≤—Å–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–∞–º
        for solution_cat, solution_data in self.SOLUTIONS.items():
            if solution_cat == category:  # –£–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏
                continue
                
            triggers = solution_data.get("triggers", [])
            # –¢—Ä–µ–±—É–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            matched_triggers = [trigger for trigger in triggers if trigger in msg]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if len(matched_triggers) > 0:
                # –î–ª—è greeting –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö
                if solution_cat == "greeting":
                    greeting_words = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "hi", "–¥–æ–±—Ä—ã–π"]
                    if any(word in msg for word in greeting_words):
                        return solution_data
                else:
                    return solution_data
        
        return None

# --- LLM ---
class LLMClient:
    def __init__(self):
        self.base_url = OLLAMA_BASE_URL
        self.model = OLLAMA_MODEL

    def is_available(self) -> bool:
        try:
            return requests.get(f"{self.base_url}/api/tags", timeout=5).status_code == 200
        except:
            return False

    def generate_response(self, user_message: str, context: Optional[Dict[str, Any]] = None) -> Optional[str]:
        system_prompt = "–¢—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –†–æ—Å–∞—Ç–æ–º. –û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
        if context:
            system_prompt += f"\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
        try:
            r = requests.post(
                f"{self.base_url}/api/chat",
                json={
                    "model": self.model,
                    "messages": [{"role": "system", "content": system_prompt},
                                 {"role": "user", "content": user_message}],
                    "stream": False,
                    "options": {"temperature": 0.3}
                },
                timeout=30
            )
            if r.status_code == 200:
                return r.json()['message']['content']
        except Exception as e:
            logger.error(f"LLM error: {e}")
        return None

# --- –û—Ç–≤–µ—Ç—ã ---
class ResponseGenerator:
    FALLBACK = "–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã."
    ERROR = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."

    @staticmethod
    def llm_fallback(message: str) -> str:
        return f"–ó–∞–ø—Ä–æ—Å: '{message}' –ø–æ–ª—É—á–µ–Ω. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
classifier = SimpleClassifier()
knowledge_base = SimpleKnowledgeBase()
llm_client = LLMClient()
response_gen = ResponseGenerator()
tickets_history: List[Dict[str, Any]] = []

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
@app.post("/tickets/", response_model=TicketResponse)
async def create_ticket(ticket: TicketRequest):
    ticket_id = f"TKT-{uuid.uuid4().hex[:8].upper()}"
    classification = classifier.classify(ticket.message)
    kb_result = knowledge_base.search(ticket.message, classification["category"])

    response_text = ""
    solution_steps: List[str] = []
    source = "knowledge_base"
    confidence = classification["confidence"]

    if kb_result and kb_result.get("confidence", 0) > 0.7:
        response_text = kb_result["answer"]
        solution_steps = kb_result.get("steps", [])
        confidence = kb_result["confidence"]
    else:
        if llm_client.is_available():
            context = {"similar_solution": kb_result.get("answer")} if kb_result else {}
            llm_response = llm_client.generate_response(ticket.message, context)
            if llm_response:
                response_text = llm_response
                source = "llm"
                confidence = 0.6
            else:
                response_text = response_gen.llm_fallback(ticket.message)
                source = "error"
                confidence = 0.1
        else:
            response_text = kb_result["answer"] if kb_result else response_gen.FALLBACK
            source = "knowledge_base"

    needs_human = confidence < 0.3 or len(ticket.message.strip()) < 3 or classification["category"] == "other"

    response = TicketResponse(
        ticket_id=ticket_id,
        response=response_text,
        category=classification["category"],
        confidence=confidence,
        source=source,
        needs_human=needs_human,
        solution_steps=solution_steps
    )

    tickets_history.append({
        "ticket_id": ticket_id,
        "user_id": ticket.user_id,
        "message": ticket.message,
        "response": response_text,
        "category": classification["category"],
        "source": source,
        "confidence": confidence,
        "timestamp": datetime.now().isoformat()
    })

    logger.info(f"Processed ticket {ticket_id}, source: {source}, category: {classification['category']}")
    return response

@app.get("/tickets/history")
async def get_history():
    return tickets_history

@app.get("/health")
async def health():
    return {
        "status": "healthy",
        "ollama": "available" if llm_client.is_available() else "unavailable",
        "tickets_processed": len(tickets_history),
        "timestamp": datetime.now().isoformat()
    }

@app.get("/")
async def root():
    return {"message": "AI TechSupport System - –†–æ—Å–∞—Ç–æ–º"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
